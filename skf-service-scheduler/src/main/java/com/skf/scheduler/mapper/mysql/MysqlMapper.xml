<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.skf.scheduler.mapper.mysql.MysqlMapper">

	<resultMap id="BaseResultMap" type="com.skf.scheduler.entity.MysqlRequestData">
		<result column="CMPT_CODE" jdbcType="VARCHAR" property="componentCode" />
		<result column="CMPT_ROTATION_SPEED" jdbcType="FLOAT" property="freqRotation" />
		<result column="CMPT_SPEED_TYPE" jdbcType="INTEGER" property="freqRotationType" />
		<result column="CMPT_SCHEMA_NAME" jdbcType="VARCHAR" property="schema" />
		<result column="CMPT_NODE_ID" jdbcType="INTEGER" property="idNode" />
		<result column="BRNG_BPFI" jdbcType="FLOAT" property="bpfi" />
		<result column="BRNG_BPFO" jdbcType="FLOAT" property="bpfo" />
		<result column="BRNG_BSF" jdbcType="FLOAT" property="bsf" />
		<result column="BRNG_FTF" jdbcType="FLOAT" property="ftf" />
		<result column="GEAR_MESHING_FREQUENCY" jdbcType="FLOAT"
			property="machineFreq" />
		<result column="CMPT_DANGER_LEVEL" jdbcType="FLOAT" property="dangerLevel" />
		<result column="CMPT_TOTAL_VALUE" jdbcType="FLOAT"
			property="totalValueDangerLevel" />
		<result column="CMPT_DEFECT_RANGE" jdbcType="FLOAT"
			property="defectFreqMonitoringRange" />
		<result column="CMPT_CPCT_ID" jdbcType="INTEGER" property="componentType" />
	</resultMap>

	<resultMap id="alarm" type="com.skf.scheduler.entity.Alarm">
		<result column="CMPT_CODE" jdbcType="VARCHAR" property="componentCode" />
		<result column="ALRM_TYPE" jdbcType="INTEGER" property="alarmType" />
		<result column="ALRM_TIME" jdbcType="TIMESTAMP" property="alarmTime" />
		<result column="STATUS" jdbcType="INTEGER" property="status" />
		<result column="TOTAL_VALUE" jdbcType="FLOAT" property="totalValue" />
		<result column="DANDER_LAVEL" jdbcType="FLOAT" property="dangerLevel" />
		<result column="SCORE" jdbcType="FLOAT" property="score" />
		<result column="CLASS" jdbcType="VARCHAR" property="clas" />
		<result column="DEFECT_FREQ_ORDER" jdbcType="FLOAT" property="defectFreqOrder" />
		<result column="BP_TYPE" jdbcType="VARCHAR" property="bpType" />
	</resultMap>

	<select id="getSchemas" resultType="java.lang.String">
		select distinct
		lower(TABLE_SCHEMA)
		from
		information_schema.TABLES where TABLE_SCHEMA
		not in
		('information_schema','performance_schema')
	</select>

	<select id="getTables" resultType="java.lang.String"
		parameterType="java.lang.String">
		select table_name from
		information_schema.tables where
		table_schema=#{schema} and
		table_type='base table'
	</select>

	<select id="getScanSign" parameterType="java.lang.String"
		resultType="java.lang.Integer">
		SELECT SIGN FROM SKF_SCAN_SIGN WHERE `schema` = #{schema}
	</select>

	<insert id="initSign" parameterType="java.lang.String">
		INSERT INTO SKF_SCAN_SIGN
		(`SCHEMA`, SIGN) values (#{schema}, 0)
	</insert>

	<update id="updateSign">
		UPDATE SKF_SCAN_SIGN SET SIGN = #{sign,
		jdbcType=INTEGER} WHERE `SCHEMA` = #{schema}
	</update>

	<select id="createSchema" parameterType="java.lang.String">
		CREATE DATABASE IF NOT
		EXISTS ${schema} DEFAULT CHARSET utf8 COLLATE utf8_general_ci
	</select>

	<select id="getRequestDatas" resultMap="BaseResultMap">
		SELECT
		c.CMPT_CODE,
		c.CMPT_ROTATION_SPEED, c.CMPT_SPEED_TYPE, c.CMPT_SCHEMA_NAME,
		c.CMPT_NODE_ID,
		b.BRNG_BPFI, b.BRNG_BPFO,b.BRNG_BSF,b.BRNG_FTF, null as
		GEAR_MESHING_FREQUENCY,
		c.CMPT_DANGER_LEVEL, c.CMPT_TOTAL_VALUE,
		c.CMPT_DEFECT_RANGE,c.CMPT_CPCT_ID
		FROM
		SKF_CMPT c
		LEFT JOIN SKF_SNSR s
		ON c.CMPT_SNSR_CODE = s.SNSR_CODE
		LEFT JOIN SKF_BRNG b ON
		c.CMPT_CPCT_ID = 1 AND c.CMPT_BEARINGGEAR_CODE =
		b.BRNG_CODE
		WHERE
		c.CMPT_CPCT_ID = 1 AND
		s.SNSR_SCHEMA_NAME = #{schema, jdbcType=VARCHAR}
		AND s.SNSR_NODE_ID = #{idNode,
		jdbcType=INTEGER}
		UNION ALL
		(SELECT
		c.CMPT_CODE, c.CMPT_ROTATION_SPEED, c.CMPT_SPEED_TYPE,
		c.CMPT_SCHEMA_NAME,
		c.CMPT_NODE_ID,
		null as BRNG_BPFI, null as
		BRNG_BPFO, null as BRNG_BSF, null as BRNG_FTF,
		g.GEAR_MESHING_FREQUENCY, c.CMPT_DANGER_LEVEL, c.CMPT_TOTAL_VALUE,
		c.CMPT_DEFECT_RANGE,c.CMPT_CPCT_ID
		FROM
		SKF_CMPT c
		LEFT JOIN SKF_SNSR s
		ON c.CMPT_SNSR_CODE = s.SNSR_CODE
		LEFT JOIN SKF_GEAR g ON
		c.CMPT_CPCT_ID = 2 AND c.CMPT_BEARINGGEAR_CODE =
		g.GEAR_CODE
		WHERE
		c.CMPT_CPCT_ID = 2 AND
		s.SNSR_SCHEMA_NAME = #{schema, jdbcType=VARCHAR}
		AND s.SNSR_NODE_ID = #{idNode,
		jdbcType=INTEGER})
	</select>

	<insert id="saveOriginalAlarm" useGeneratedKeys="true"
		keyProperty="ID">
		INSERT INTO
		skf_${ssreq.schema}.ALARM_ORGN
		(ComponentCode,
		IDMeasurement,
		IDNode,
		MeasDate,
		StorageReason,
		SampleRate,
		SpectraScaling,
		TimesignalLines,
		TotalValueDangerLevel,
		EndFreq,
		SpectraLines,
		FreqRotation,
		ScaleFactor,
		RawData,
		BPFI,
		BPFO,
		BSF,
		FTF,
		MachineFreq,
		DangerLevel,
		DefectFreqMonitoringRange
		<include refid="responseDataKey"></include>
		)
		values
		(#{msreq.componentCode},
		#{ssreq.idMeasurement},
		#{ssreq.idNode},
		#{ssreq.measDate},
		#{ssreq.storageReason},
		#{ssreq.sampleRate},
		#{ssreq.spectraScaling},
		#{ssreq.timesignalLines},
		#{msreq.totalValueDangerLevel},
		#{ssreq.endFreq},
		#{ssreq.spectraLines},
		#{msreq.freqRotation},
		#{ssreq.scaleFactor},
		#{ssreq.rawData},
		#{msreq.bpfi},
		#{msreq.bpfo},
		#{msreq.bsf},
		#{msreq.ftf},
		#{msreq.machineFreq},
		#{msreq.dangerLevel},
		#{msreq.defectFreqMonitoringRange}
		<include refid="responseDataValue"></include>
		)
	</insert>

	<sql id="responseDataKey">
		<if test="resp != null">
			,DefectFreqOrder,
			ENV1X,
			ENV2X,
			ENV3X,
			ENV4X,
			ENV5X,
			BearingTotalValue,
			ifBearingTotalValueAlarm,
			Score,
			Class,
			BPType
		</if>
	</sql>

	<sql id="responseDataValue">
		<if test="resp != null">
			,#{resp.DefectFreqOrder},
			#{resp.ENV1X},
			#{resp.ENV2X},
			#{resp.ENV3X},
			#{resp.ENV4X},
			#{resp.ENV5X},
			#{resp.BearingTotalValue},
			#{resp.ifBearingTotalValueAlarm},
			#{resp.score},
			#{resp.clas},
			#{resp.bpType}
		</if>
	</sql>

	<sql id="alarmColumns">
		CMPT_CODE,
		ALRM_TYPE,
		ALRM_TIME,
		STATUS,
		TOTAL_VALUE,
		DANDER_LAVEL,
		SCORE,
		CLASS,
		DEFECT_FREQ_ORDER,
		BP_TYPE
	</sql>

	<select id="getAlarm" resultMap="alarm">
		SELECT
		<include refid="alarmColumns"></include>
		FROM SKF_ALRM WHERE
		CMPT_CODE = #{componentCode, jdbcType=VARCHAR} AND
		ALRM_TYPE =
		#{alarmType, jdbcType=INTEGER}
	</select>

	<insert id="saveAlarm" parameterType="com.skf.scheduler.entity.Alarm">
		INSERT INTO SKF_ALRM (
		<include refid="alarmColumns"></include>
		) VALUES (
		#{alarm.componentCode},
		#{alarm.alarmType},
		#{alarm.alarmTime},
		#{alarm.status},
		#{alarm.totalValue},
		#{alarm.dangerLevel},
		#{alarm.score},
		#{alarm.clas},
		#{alarm.defectFreqOrder},
		#{alarm.bpType}
		)
	</insert>

	<update id="updateAlarm" parameterType="com.skf.scheduler.entity.Alarm">
		UPDATE SKF_ALRM SET
		ALRM_TIME = #{alarm.alarmTime},
		STATUS = #{alarm.status},
		TOTAL_VALUE =
		#{alarm.totalValue},
		DANDER_LAVEL = #{alarm.dangerLevel},
		SCORE =
		#{alarm.score},
		CLASS = #{alarm.clas},
		DEFECT_FREQ_ORDER =
		#{alarm.defectFreqOrder},
		BP_TYPE = #{alarm.bpType}
		WHERE CMPT_CODE =
		#{alarm.componentCode}
		AND ALRM_TYPE = #{alarm.alarmType}
	</update>

	<insert id="updateScore" parameterType="com.skf.scheduler.entity.Score">
		<selectKey keyProperty="count" resultType="int" order="BEFORE">
			SELECT count(*) FROM SKF_CMPT_SCORE WHERE CMPT_CODE =
			#{score.componentCode}
		</selectKey>
		<if test="count > 0">
			UPDATE SKF_CMPT_SCORE
			SET TIME = #{score.time},
			CALSS =
			#{score.clas},
			SCORE = #{score.score},
			TOTAL_VALUE =
			#{score.totalValue},
			DANGER_LEVEL = #{score.dangerLevel},
			BP_TYPE =
			#{score.bpType}
			WHERE CMPT_CODE =
			#{score.componentCode}
		</if>
		<if test="count==0">
			INSERT INTO SKF_CMPT_SCORE (CMPT_CODE, TIME, CALSS, SCORE,
			TOTAL_VALUE, DANGER_LEVEL, BP_TYPE)
			VALUES
			(#{score.componentCode},#{score.time},#{score.clas},#{score.score},
			#{score.totalValue}, #{score.dangerLevel}, #{score.bpType})
		</if>
	</insert>

	<select id="createAlarmOriginalTable" parameterType="java.lang.String">
		CREATE TABLE
		${schema}.`ALARM_ORGN` (
		`ID` int(11) NOT NULL AUTO_INCREMENT,
		`ComponentCode` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci
		NULL DEFAULT
		NULL,
		`IDMeasurement` int(11) NULL DEFAULT NULL,
		`IDNode`
		int(11) NULL DEFAULT NULL,
		`MeasDate` timestamp(0) NOT NULL DEFAULT
		CURRENT_TIMESTAMP ON UPDATE
		CURRENT_TIMESTAMP(0),
		`StorageReason`
		int(11) NULL DEFAULT NULL,
		`SampleRate` float NULL DEFAULT NULL,
		`SpectraScaling` int(11) NULL DEFAULT NULL,
		`TimesignalLines` int(11)
		NULL DEFAULT NULL,
		`TotalValueDangerLevel` float NULL DEFAULT NULL,
		`EndFreq` float NULL DEFAULT NULL,
		`SpectraLines` int(11) NULL DEFAULT
		NULL,
		`FreqRotation` float NULL DEFAULT NULL,
		`ScaleFactor` float NULL
		DEFAULT NULL,
		`RawData` blob NULL,
		`BPFI` float NULL DEFAULT NULL,
		`BPFO` float NULL DEFAULT NULL,
		`BSF` float NULL DEFAULT NULL,
		`FTF`
		float NULL DEFAULT NULL,
		`MachineFreq` float NULL DEFAULT NULL,
		`DangerLevel` float NULL DEFAULT NULL,
		`DefectFreqMonitoringRange`
		float NULL DEFAULT NULL,
		`DefectFreqOrder` float NULL DEFAULT NULL,
		`ENV1X` float NULL DEFAULT NULL,
		`ENV2X` float NULL DEFAULT NULL,
		`ENV3X` float NULL DEFAULT NULL,
		`ENV4X` float NULL DEFAULT NULL,
		`ENV5X` float NULL DEFAULT NULL,
		`BearingTotalValue` float NULL DEFAULT
		NULL,
		`ifBearingTotalValueAlarm` int(11) NULL DEFAULT NULL,
		`Score`
		float NULL DEFAULT NULL,
		`Class` varchar(1) CHARACTER SET utf8 COLLATE
		utf8_general_ci NULL DEFAULT
		NULL,
		`BPType` varchar(32) CHARACTER SET
		utf8 COLLATE utf8_general_ci NULL DEFAULT
		NULL,
		PRIMARY KEY (`ID`) USING
		BTREE
		) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE
		=
		utf8_general_ci ROW_FORMAT = Compact;
	</select>

</mapper>